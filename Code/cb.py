# -*- coding: utf-8 -*-
"""CB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ChunanhvWjO9205iUyMjebjpoYFAdnTr
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#links = pd.read_csv('links.csv')
movies = pd.read_csv('movies.csv')
ratings = pd.read_csv('ratings.csv')
#tags = pd.read_csv('tags.csv')

movies.shape

ratings['userId'] = ratings['userId'].astype('str')
ratings['movieId'] = ratings['movieId'].astype('str')
movies['movieId'] = movies['movieId'].astype('str')

"""# Statistics of the dataset"""

userId = ratings.userId.unique()
movieId = ratings.movieId.unique()
num_users = len(userId)
num_items =len(movieId)
print('number of unique users:', num_users)
print('number of unique movies:', num_items)

sparsity = 1 - len(ratings) / (num_users * num_items)
print('matrix sparsity:',sparsity)

#Number of movies rated by each user.
numMoviesRatedByUser = ratings.groupby(['userId']).size().reset_index()

numMoviesRatedByUser.sort_values(by=0, ascending=True)

"""# Content Based

## TF-IDF
"""

movies.genres = movies.genres.str.split('|')

movies.head()

movies.genres = movies.genres.fillna("").astype('str')
movies.head()

from sklearn.feature_extraction.text import TfidfVectorizer
tf = TfidfVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')
tfidf_matrix = tf.fit_transform(movies['genres'])
tfidf_matrix.shape

tfidf_matrix

print(tf.get_feature_names())

"""## Cosine Similarity"""

from sklearn.metrics.pairwise import cosine_similarity
sim = cosine_similarity(tfidf_matrix)

sim.shape

sim[:4, :4]

"""##Predictions"""

# Build a 1-dimensional array with movie titles
titles = movies['title']
indices = pd.Series(movies.index, index=movies['title'])

# get movie recommendations based on the cosine similarity score of movie genres
def pred(title):
  # get the index number for the title.
  idx = indices[title]
  #get the row for thar idx as a list.
  sim_scores = list(enumerate(sim[idx]))
  # sort the list.
  sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
  # get the top 10 score indices.
  topScores = sim_scores[1:11]
  # get the movie index
  movie_indices = [i[0] for i in topScores]
  return movies.iloc[movie_indices], movie_indices

"""#Case Study

##User 1
"""

simMoviesU1, simMovieIndexpredU1 = pred('Dragonheart (1996)')

simMoviesU1

"""## User 2"""

simMoviesU2, simMovieIndexpredU2 = pred('What Happens in Vegas... (2008)')

simMoviesU2

"""##User 3"""

simMoviesU3, simMovieIndexpredU3 = pred('Gladiator (2000)')

simMoviesU3

"""#Evaluation"""

user1 = ratings.loc[ratings.userId=='1']

# all movies that user has rated.
user1 = user1.merge(movies, how='left', on='movieId')

user1.movieId = user1.movieId.astype(int)

# all movies that user has rated.
user1

simMovies, simMovieIndex = pred('Toy Story (1995)')
simMovies.head(10)

simMovieIndex

for i, row in user1.iterrows():
  if(row.movieId in simMovieIndex):
    print(row)

user1.loc[user1.movieId == 6194]